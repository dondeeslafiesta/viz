{"version":3,"sources":["components/GeoViz/Dataset.tsx","components/GeoViz/GeoViz.tsx","App.tsx","AppRouter.tsx","index.tsx"],"names":["Dataset","mapper","data","mapper_json","mapper_rev","data_csv","loaded","this","a","d3","key","val","ridx","res","row","state_name","state_data","state_iso","parseFloat","console","log","GeoViz","props","ref","state","React","createRef","attr","style","text","dataset","states_json","states","color","domain","objects","type","states_simplified","toposimplify","p","state_geometries","topojson","geometries","filter","g","projection","fitExtent","path","data_reader","load","append","selectAll","features","join","d","id","on","event","target","raise","lower","data_str","Math","round","showToolTip","properties","hideTooltip","svg","zoom","transform","toString","call","drawMap","className","width","height","PureComponent","App","AppRouter","fallback","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b9ed9b2.chunk.js","sourcesContent":["import * as d3 from 'd3';\nimport { Types } from './types';\n\nclass Dataset {\n    mapper: string;\n    data: string;\n    mapper_json: any;\n    mapper_rev: any;\n    data_csv: any;\n    loaded: boolean;\n\n    constructor(mapper: string, data: string) {\n        this.mapper = mapper;\n        this.data = data;\n        this.loaded = false;\n    }\n\n    async load(): Promise<Types.StateData> {\n        this.mapper_json = await d3.json(this.mapper);\n        this.mapper_rev = {};\n        this.data_csv = await d3.csv(this.data);\n        for (let key in this.mapper_json) {\n            let val = this.mapper_json[key];\n            this.mapper_rev[val] = key;\n        }\n\n        let res: Types.StateData = {};\n\n        for (let ridx in this.data_csv) {\n            let row = this.data_csv[ridx];\n            if (row['State'] in this.mapper_rev) {\n                let state_name: string = row['State'];\n                let state_data = row['Average'];\n                let state_iso = this.mapper_rev[state_name];\n                res[state_iso] = parseFloat(state_data);\n            }\n        }\n\n        console.log(res);\n        this.loaded = true;\n        return res;\n    }\n}\n\nexport { Dataset };","/*\nAuthor: Eli Elad Elrom\nWebsite: https://EliElrom.com\nLicense: MIT License\nComponent: src/component/GeoViz/GeoViz.tsx\n*/\n\nimport React, { RefObject } from 'react'\nimport './GeoViz.scss'\nimport * as d3 from 'd3' // yarn add d3 @types/d3\nimport * as topojson from 'topojson-client';\nimport * as toposimplify from 'topojson-simplify';\nimport { GeometryCollection, Topology } from 'topojson-specification'\nimport { Types } from './types'\nimport { svg } from 'd3'\nimport { Dataset } from './Dataset'\nimport { on } from 'node:events'\n\nexport default class GeoViz extends React.PureComponent<IGeoVizProps, IGeoVizState> {\n  ref: RefObject<HTMLDivElement>\n\n  constructor(props: IGeoVizProps) {\n    super(props)\n    this.state = {\n      // TODO\n    }\n    this.ref = React.createRef()\n  }\n\n  hideTooltip() {\n    d3.select('#tooltip')\n    .attr('style', 'position: absolute; opacity: 0;');\n  }\n\n  showToolTip(data: string) {\n    d3.select('#tooltip').style('opacity', 1)\n    .text(data);\n  }\n\n  data(dataset: Types.StateData, key: string | number | undefined): number {\n    if (typeof(key) == \"string\" && key in dataset) {\n      return dataset[key];\n    } else {\n      return 0;\n    }\n  }\n\n  async drawMap() {\n    const states_json: unknown = await d3.json('/viz/geo/states.quantized.topo.json');\n    const states = states_json as Topology<Types.StateObjects>;\n    // const color = d3.scaleQuantize([0, 100], d3.schemeBlues[9])\n    const color = d3.scaleSequential(d3.interpolateBlues).domain([0, 25]);\n\n    if (states.objects.states.type !== \"GeometryCollection\") {\n      return;\n    }\n\n    let states_simplified = toposimplify.presimplify(states);\n    let p = toposimplify.quantile(states_simplified, 0.3);\n    console.log(p)\n    states_simplified = toposimplify.simplify(states_simplified, p);\n\n    const state_geometries = topojson.feature(states_simplified, {\n      type: \"GeometryCollection\",\n      geometries: states.objects.states.geometries\n      .filter((g) => g.type == \"MultiPolygon\" || g.type == \"Polygon\")\n    });\n\n    const projection = d3.geoMercator()\n    .fitExtent([[20, 20], [500, 500]], state_geometries);\n    const path = d3.geoPath().projection(projection);\n\n    const data_reader = new Dataset('/viz/geo/iso.json', '/viz/geo/vaxx.csv');\n    const dataset = await data_reader.load();\n\n    d3.selectAll(\"svg\")\n    .append(\"g\")\n    .selectAll(\"path\")\n    .data(topojson.feature(states, states.objects.states).features)\n    .join(\"path\")\n    .attr(\"fill\", d => color(this.data(dataset, d.id)))\n    .attr(\"d\", path)\n    .append(\"title\")\n    .text(d => `${d.id}`)\n    // d3.selectAll(\"svg\")\n    // .append(\"path\")\n    // .datum(topojson.mesh(states))\n    // .attr(\"fill\", \"none\")\n    // .attr(\"stroke\", \"white\")\n    // .attr(\"d\", path)\n\n    d3.selectAll(\"svg\")\n    .selectAll(\"path\")\n    .on(\"touchhmove mousemove\", (event, d: any) => {\n      d3.select(event.target)\n      .attr(\"stroke\", \"red\")\n      .raise();\n    })\n    .on(\"touchend mouseleave\", (event, d) => {\n      d3.select(event.target)\n      .attr(\"stroke\", null)\n      .lower();\n    })\n    .on('mouseover', (event, d: any) => {\n      const data_str = Math.round(this.data(dataset, d.id));\n      this.showToolTip(d.properties.state_name + ': ' + data_str + '%');\n    })\n    // .on('mousemove', (event: React.MouseEvent<any, MouseEvent>) => {\n    //   d3.select('#tooltip')\n    //   .style('left', event.pageX + 'px')\n    //   .style('top', event.pageY + 'px')\n\n    // })\n    .on('mouseout', (event) => {\n      this.hideTooltip();\n    })\n\n    const svg = d3.select<Element, any>(\"svg\");\n    const zoom = d3.zoom().on(\"zoom\", \n    (event: d3.D3ZoomEvent<d3.ZoomedElementBaseType, any>) => {\n      const {transform} = event;\n      svg.attr(\"transform\", transform.toString());\n    });\n    // svg.call(zoom);\n    d3.selectAll<Element, any>('.GeoViz').call(zoom);\n\n  }\n\n  async componentDidMount() {\n    this.drawMap();\n  }\n\n  render() {\n    return (\n      <div className=\"GeoViz\" ref={this.ref}>\n        <div id=\"tooltip\"></div>\n        <svg width=\"500\" height=\"500\">\n        </svg>\n      </div>\n    )\n  }\n}\n\ninterface IGeoVizProps {\n  // TODO\n}\n\ninterface IGeoVizState {\n  // TODO\n}","import React from 'react'\nimport './App.scss'\nimport BasicBarChart from './components/BasicBarChart/BasicBarChart'\nimport BasicLineChart from './components/BasicLineChart/BasicLineChart'\nimport Dashboard from './components/dashboard/Dashboard'\nimport GeoViz from './components/GeoViz/GeoViz'\n\nfunction App() {\n  return (\n    // <Dashboard />\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <GeoViz />\n        {/* <Dashboard /> */}\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// src/AppRouter.tsx\n\nimport React, { FunctionComponent, Suspense } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { RecoilRoot } from 'recoil'\nimport App from './App'\n\nconst AppRouter: FunctionComponent = () => {\n  return (\n    <Router>\n      <RecoilRoot>\n        <Suspense fallback={<span>Loading...</span>}>\n          <Switch>\n            <Route exact path=\"/viz\" component={App} />\n          </Switch>\n        </Suspense>\n      </RecoilRoot>\n    </Router>\n  )\n}\n\n/*\n// TODO EE: To replace Recoil with Redux Toolkit;\n\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\n<Router>\n  <Provider store={store}>\n    <Switch>\n      <Route exact path=\"/\" component={App} />\n    </Switch>\n  </Provider>\n</Router>\n\n */\n\n/*\n\n// TODO: EE: Without Recoil or Redux Toolkit;\n\n// src/AppRouter.tsx\n\nimport React, { FunctionComponent } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport App from './App'\n\nconst AppRouter: FunctionComponent = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n      </Switch>\n    </Router>\n  )\n}\n\n */\n\nexport default AppRouter\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport AppRouter from './AppRouter'\n\n// You need bootstrap? $ yarn add bootstrap\n// See: https://create-react-app.dev/docs/adding-bootstrap\n// import 'bootstrap/dist/css/bootstrap.css';\n\n// Single-page application (SPA)\nReactDOM.render(<AppRouter />, document.getElementById('root'))\n\n// If you want to Pre-render with react-snap\n// Step 1: install $ yarn add --dev react-snap\n// Step 2: add to package.json run script: \"postbuild\": \"react-snap\"\n// Step 3: Add to package.json: \"reactSnap\":{\"inlineCss\":true}\n// Step 3: replace to the script below.\n\n/*\nimport { hydrate, render } from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\n\nconst rootElement = document.getElementById('root')\nif (rootElement && rootElement!.hasChildNodes()) {\n  hydrate(<AppRouter />, rootElement)\n\n  // Precache - set to 'register' once you Pre-render\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: http://bit.ly/CRA-PWA\n  serviceWorker.register()\n} else {\n  render(<AppRouter />, rootElement)\n}\n*/\n"],"sourceRoot":""}